plugins {
    id 'maven-publish'
    alias libs.plugins.cursegradle
    alias libs.plugins.minotaur
}

apply plugin: 'org.quiltmc.loom'

base.archivesName = "${mod_id}-quilt-${libs.versions.minecraft.get()}"

repositories {

    maven {
        name 'Quilt (Release)'
        url 'https://maven.quiltmc.org/repository/release/'
    }

    maven {
        name 'Quilt (Snapshot)'
        url 'https://maven.quiltmc.org/repository/snapshot/'
        content {
            includeGroup 'org.quiltmc.fabric_api_qsl'
            includeGroupByRegex 'org\\.quiltmc\\.qsl(?:\\.[a-z_]+)?'
        }
    }
}

configurations {
    testCompileOnly.extendsFrom(compileOnly)
}

dependencies {
    minecraft libs.minecraft
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
    }
    modImplementation libs.quilt.loader

    implementation project(":Common")

    compileOnly libs.autoservice
    annotationProcessor libs.autoservice
}

loom {
    runs {
        client {
            client()
            setConfigName("Quilt Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Quilt Server")
            ideConfigGenerated(true)
            runDir("runserver")
        }
    }
    mixin {
        useLegacyMixinAp = true
        defaultRefmapName = 'nomoreportals.refmap.json'
    }
}

processResources {
    from project(":Common").sourceSets.main.resources
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
    from project(":Common").sourceSets.main.allSource
}

javadocJar {
    from project(":Common").sourceSets.main.allJava
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

tasks.jar.finalizedBy(tasks.remapJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }

    repositories {
    }
}

// manual publishing version check
def List<String> compatibleVersions = Arrays.asList(project.compatible_versions.split(','))
if (!compatibleVersions.contains(libs.versions.minecraft.get())) {
    throw new RuntimeException("You didn't update the list of compatible versions for publishing!")
}

if (project.hasProperty("curseforge_key")) {
    curseforge {
        apiKey = project.curseforge_key
        project {
            id = '825278'
            releaseType = "${project.release_type}"
            compatibleVersions.each {
                addGameVersion it
            }
            addGameVersion 'Quilt'
            mainArtifact(remapJar) {
                displayName = "No More Portals [Quilt] v$project.version"
            }
        }
        options {
            forgeGradleIntegration = true
        }
    }
}

if (project.hasProperty("modrinth_key")) {
    modrinth {
        token = project.modrinth_key
        projectId = 'gQeZmycy'
        versionNumber = "$project.version"
        versionType = "${project.release_type}"
        detectLoaders = false
        uploadFile = remapJar
        gameVersions = compatibleVersions
        loaders = ['quilt']
    }
}
